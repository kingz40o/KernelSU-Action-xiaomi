name: debug build

on:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Ksu tags'     
        required: true
        default: 'main'

env:
  kernel_repository: kingz40o/android_kernel_xiaomi_msm8998
  kernel_branch: lineage-20
  device: sagit
  defconfig: sagit_defconfig
  use_aosp_clang: false
  clang_version: 14
  tags: ${{github.event.inputs.tags}}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: install common package
        run: |
          sudo apt update
          sudo apt install -y curl zip unzip git make bc binutils-arm-linux-gnueabi binutils-aarch64-linux-gnu

      - name: checkout kernel
        uses: actions/checkout@v3
        with:
          repository: ${{ env.kernel_repository }}
          ref: ${{ env.kernel_branch }}

      - name: get latest kernel commit id
        run: |
          kernel_commit_id=$(git rev-parse HEAD)
          echo kernel_commit_id=$kernel_commit_id >> $GITHUB_ENV

      - name: "vanilla-clang: setup"
        if: ${{ env.use_aosp_clang == 'false' }}
        run: |
          sudo apt install -y clang-$clang_version lld-$clang_version

          PATH=/usr/lib/llvm-$clang_version/bin:$PATH
          echo PATH=$PATH >> $GITHUB_ENV

      - name: setup kernelsu
        run: |
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ env.tags }}
          #echo 'CONFIG_KPROBES=y' >> arch/arm64/configs/${{ env.defconfig }}

          cd KernelSU
          git checkout ${{ env.tags }}

      - name: export flags
        run: |
          flags="O=out ARCH=arm64 LLVM=1 LLVM_IAS=1 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-" 
          echo flags=$flags >> $GITHUB_ENV

      - name: make defconfig
        run: |
          make $flags ${{ env.defconfig }}

      - name: make
        if: ${{ !inputs.pseudo_make }}
        run: |
          make $flags -j$(nproc --all)

      - name: anykernel
        run: |
          curl -Lo AnyKernel3.zip https://github.com/osm0sis/AnyKernel3/archive/refs/heads/master.zip
          unzip AnyKernel3.zip
          cd AnyKernel3-master

          cat > anykernel.sh <<EOF
          properties() { '
          do.devicecheck=1
          do.cleanup=1
          device.name1=${{ env.device }}
          '; }
          block=auto
          is_slot_device=0
          . tools/ak3-core.sh
          split_boot
          flash_boot
          EOF

          cp ../out/arch/arm64/boot/Image.gz-dtb .
          zip -r AnyKernel3-${{ env.tags }}-${{ env.device }}.zip * -x .git README.md *placeholder
   
      - name: Upload AnyKernel
        uses: actions/upload-artifact@v3
        with:
          name: AnyKernel3-${{ env.tags }}-${{ env.device }}
          path: "AnyKernel3-master/AnyKernel3*.zip"
